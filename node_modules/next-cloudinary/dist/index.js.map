{"version":3,"sources":["../src/index.ts","../src/components/CldImage/CldImage.tsx","../src/lib/cloudinary.ts","../src/constants/analytics.ts","../package.json","../src/loaders/cloudinary-loader.ts","../src/components/CldOgImage/CldOgImage.tsx","../src/components/CldUploadButton/CldUploadButton.tsx","../src/components/CldUploadWidget/CldUploadWidget.tsx","../src/lib/util.ts","../src/components/CldVideoPlayer/CldVideoPlayer.tsx"],"sourcesContent":["export { default as CldImage } from './components/CldImage';\nexport type { CldImageProps } from './components/CldImage';\n\nexport { default as CldOgImage } from './components/CldOgImage';\nexport type { CldOgImageProps } from './components/CldOgImage';\n\nexport { default as CldUploadButton } from './components/CldUploadButton';\nexport type { CldUploadButtonProps } from './components/CldUploadButton';\n\nexport { default as CldUploadWidget } from './components/CldUploadWidget';\nexport type { CldUploadWidgetProps, CldUploadWidgetPropsChildren, CldUploadWidgetPropsOptions, CldUploadWidgetResults } from './components/CldUploadWidget';\n\nexport { default as CldVideoPlayer } from './components/CldVideoPlayer';\nexport type { CldVideoPlayerProps, CldVideoPlayerPropsColors, CldVideoPlayerPropsLogo } from './components/CldVideoPlayer';\n\nexport { cloudinaryLoader } from './loaders/cloudinary-loader';\nexport type { CloudinaryLoader, CloudinaryLoaderLoaderOptions, CloudinaryLoaderCldOptions } from './loaders/cloudinary-loader';\n\nexport { getCldImageUrl } from './lib/cloudinary';\nexport type { GetCldImageUrl, GetCldImageUrlOptions, GetCldImageUrlConfig, GetCldImageUrlAnalytics } from './lib/cloudinary';\n\nexport type { CloudinaryVideoPlayer, CloudinaryVideoPlayerOptions, CloudinaryVideoPlayerOptionsColors, CloudinaryVideoPlayerOptionsLogo } from './types/player';","import React, { useState } from 'react';\nimport Image, { ImageProps } from 'next/image';\nimport { getTransformations } from '@cloudinary-util/util';\nimport { transformationPlugins } from '@cloudinary-util/url-loader';\nimport type { ImageOptions } from '@cloudinary-util/url-loader';\n\nimport { pollForProcessingImage } from '../../lib/cloudinary';\n\nimport { cloudinaryLoader } from '../../loaders/cloudinary-loader';\n\nexport type CldImageProps = Omit<ImageProps, 'src'> & ImageOptions & {\n  src: string;\n  preserveTransformations?: boolean;\n};\n\nconst CldImage = (props: CldImageProps) => {\n  const CLD_OPTIONS = [\n    'deliveryType',\n    'preserveTransformations'\n  ];\n\n  transformationPlugins.forEach(({ props = [] }) => {\n    props.forEach(prop => {\n      if ( CLD_OPTIONS.includes(prop) ) {\n        throw new Error(`Option ${prop} already exists!`);\n      }\n      CLD_OPTIONS.push(prop);\n    });\n  })\n\n  // Construct the base Image component props by filtering out Cloudinary-specific props\n\n  const imageProps = {\n    alt: props.alt,\n    src: props.src\n  };\n\n  (Object.keys(props) as Array<keyof typeof props>)\n    .filter(key => !CLD_OPTIONS.includes(key))\n    // @ts-expect-error\n    .forEach(key => imageProps[key] = props[key]);\n\n\n  const defaultImgKey = (Object.keys(imageProps) as Array<keyof typeof imageProps>).map(key => `${key}:${imageProps[key]}`).join(';');\n  const [imgKey, setImgKey] = useState(defaultImgKey);\n\n  // Construct Cloudinary-specific props by looking for values for any of the supported prop keys\n\n  const cldOptions = {};\n\n  CLD_OPTIONS.forEach(key => {\n    // @ts-expect-error\n    if ( props[key] ) {\n      // @ts-expect-error\n      cldOptions[key] = props[key] || undefined;\n    }\n  });\n\n  // Try to preserve the original transformations from the Cloudinary URL passed in\n  // to the component. This only works if the URL has a version number on it and otherwise\n  // will fail to load\n\n  if (props.preserveTransformations) {\n    try {\n      const transformations = getTransformations(props.src);\n      // @ts-expect-error\n      cldOptions.rawTransformations = [...transformations.flat(), ...(props.rawTransformations || [])];\n    } catch(e) {\n      console.warn(`Failed to preserve transformations: ${(e as Error).message}`)\n    }\n  }\n\n  /**\n   * handleOnError\n   */\n\n  interface HandleOnError {\n    target: any;\n  }\n\n  async function handleOnError(options: HandleOnError) {\n    const result = await pollForProcessingImage({ src: options.target.src })\n    if ( result ) {\n      setImgKey(`${defaultImgKey};${Date.now()}`);\n    }\n  }\n\n  return (\n    <Image\n      key={imgKey}\n      {...imageProps}\n      loader={(loaderOptions) => cloudinaryLoader({ loaderOptions, imageProps, cldOptions })}\n      onError={handleOnError}\n    />\n  );\n}\n\nexport default CldImage;\n","import { constructCloudinaryUrl } from '@cloudinary-util/url-loader';\nimport type { ImageOptions, ConfigOptions, AnalyticsOptions } from '@cloudinary-util/url-loader';\n\nimport { NEXT_CLOUDINARY_ANALYTICS_ID, NEXT_CLOUDINARY_VERSION, NEXT_VERSION } from '../constants/analytics';\n\n/**\n * getCldImage\n */\n\nexport interface GetCldImageUrlOptions extends ImageOptions {};\nexport interface GetCldImageUrlConfig extends ConfigOptions {};\nexport interface GetCldImageUrlAnalytics extends AnalyticsOptions {};\n\nexport interface GetCldImageUrl {\n  options: GetCldImageUrlOptions;\n  config?: GetCldImageUrlConfig;\n  analytics?: GetCldImageUrlAnalytics;\n}\n\nexport function getCldImageUrl(options: ImageOptions, config?: ConfigOptions, analytics?: AnalyticsOptions) {\n  return constructCloudinaryUrl({\n    options,\n    config: Object.assign({\n      cloud: {\n        cloudName: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME\n      },\n    }, config),\n    analytics: Object.assign({\n      sdkCode: NEXT_CLOUDINARY_ANALYTICS_ID,\n      sdkSemver: NEXT_CLOUDINARY_VERSION,\n      techVersion: NEXT_VERSION,\n      feature: ''\n    }, analytics)\n  });\n}\n\n/**\n * pollForProcessingImage\n */\n\nexport interface PollForProcessingImageOptions {\n  src: string;\n}\n\nexport async function pollForProcessingImage(options: PollForProcessingImageOptions): Promise<boolean> {\n  const { src } = options;\n  try {\n    await new Promise((resolve, reject) => {\n      fetch(src).then(res => {\n        if ( !res.ok ) {\n          reject(res);\n          return;\n        }\n        resolve(res);\n      });\n    });\n  } catch(e: any) {\n    if ( e.status === 423 ) {\n      return await pollForProcessingImage(options);\n    }\n    return false;\n  }\n  return true;\n}","import nextPkg from 'next/package.json';\nimport pkg from '../../package.json';\n\nexport const NEXT_CLOUDINARY_ANALYTICS_ID = 'V';\nexport const NEXT_CLOUDINARY_VERSION = pkg.version;\nexport const NEXT_VERSION = nextPkg.version;","{\n  \"name\": \"next-cloudinary\",\n  \"version\": \"4.3.0\",\n  \"main\": \"./dist/index.js\",\n  \"module\": \"./dist/index.mjs\",\n  \"types\": \"./dist/index.d.ts\",\n  \"source\": \"src/index.ts\",\n  \"scripts\": {\n    \"build\": \"tsup src/index.ts --dts\",\n    \"dev\": \"tsup src/index.ts --watch --dts\",\n    \"prepublishOnly\": \"cp ../README.md . && yarn build\",\n    \"postpublish\": \"rm ./README.md\",\n    \"test\": \"jest\",\n    \"test:app\": \"NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=\\\"test\\\" yarn build && cd tests/nextjs-app && yarn build\"\n  },\n  \"dependencies\": {\n    \"@cloudinary-util/url-loader\": \"^3.1.1\",\n    \"@cloudinary-util/util\": \"^2.0.1\",\n    \"@cloudinary/url-gen\": \"^1.8.6\"\n  },\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.19.6\",\n    \"@babel/preset-env\": \"^7.19.4\",\n    \"@types/jest\": \"^29.2.0\",\n    \"@types/react\": \"^18.0.28\",\n    \"@types/react-dom\": \"^18.0.11\",\n    \"babel-jest\": \"^29.2.2\",\n    \"dotenv\": \"^16.0.3\",\n    \"jest\": \"^29.2.2\",\n    \"jest-environment-jsdom\": \"^29.2.2\",\n    \"ts-jest\": \"^29.0.3\",\n    \"tsup\": \"^6.6.3\",\n    \"typescript\": \"^4.9.4\"\n  },\n  \"peerDependencies\": {\n    \"next\": \"^12 || ^13\",\n    \"react\": \"^17 || ^18\"\n  }\n}\n","import { ImageProps } from 'next/image';\n\nimport { getCldImageUrl } from '../lib/cloudinary';\n\nexport interface CloudinaryLoaderCldOptions {\n  heightResize?: string | number;\n  widthResize?: string | number;\n}\n\nexport interface CloudinaryLoaderLoaderOptions {\n  height?: string | number;\n  width?: string | number;\n}\n\nexport interface CloudinaryLoader {\n  loaderOptions: CloudinaryLoaderLoaderOptions;\n  imageProps: ImageProps;\n  cldOptions: CloudinaryLoaderCldOptions;\n  cldConfig?: object;\n}\n\nexport function cloudinaryLoader({ loaderOptions, imageProps, cldOptions, cldConfig = {} }: CloudinaryLoader) {\n  const options = {\n    ...imageProps,\n    ...cldOptions\n  }\n\n  options.width = typeof options.width === 'string' ? parseInt(options.width) : options.width;\n  options.height = typeof options.height === 'string' ? parseInt(options.height) : options.height;\n\n  // The loader options are used to create dynamic sizing when working with responsive images\n  // so these should override the default options collected from the props alone if\n  // the results are different. While we don't always use the height in the loader logic,\n  // we always pass it here, as the usage is determined later based on cropping.js\n\n  if ( typeof loaderOptions?.width === 'number' && typeof options.width === 'number' && loaderOptions.width !== options.width ) {\n    const multiplier = loaderOptions.width / options.width;\n\n    options.widthResize = loaderOptions.width;\n\n    if ( typeof options.height === 'number' ) {\n      options.heightResize = Math.round(options.height * multiplier);\n    }\n  }\n\n  // @ts-ignore\n  return getCldImageUrl(options, cldConfig);\n}","import React from 'react';\nimport Head from 'next/head';\nimport type { ImageOptions } from '@cloudinary-util/url-loader';\n\nimport { CldImageProps } from '../CldImage/CldImage';\nimport { getCldImageUrl } from '../../lib/cloudinary';\n\nconst IMAGE_WIDTH = 2400;\nconst IMAGE_HEIGHT = 1200;\n\nconst TWITTER_CARD = 'summary_large_image';\n\nexport type CldOgImageProps = CldImageProps & {\n  excludeTags?: Array<string>;\n  keys?: object;\n  twitterTitle?: string;\n}\n\nconst CldOgImage = ({ excludeTags = [], twitterTitle, keys = {}, ...props }: CldOgImageProps) => {\n  const { alt } = props;\n\n  const options: ImageOptions = {\n    ...props,\n    crop: props.crop || 'fill',\n    gravity: props.gravity || 'center',\n    height: props.height || IMAGE_HEIGHT,\n    src: props.src,\n    width: props.width || IMAGE_WIDTH,\n  }\n\n  const metaKeys = {\n    'og:image': 'og-image',\n    'og:image:secure_url': 'og-image-secureurl',\n    'og:image:width': 'og-image-width',\n    'og:image:height': 'og-image-height',\n    'og:image:alt': 'og-image-alt',\n    'twitter:title': 'twitter-title',\n    'twitter:card': 'twitter-card',\n    'twitter:image': 'twitter-image',\n    ...keys\n  }\n\n  const ogImageUrl = getCldImageUrl(options);\n\n  // We need to include the tags within the Next.js Head component rather than\n  // direcly adding them inside of the Head otherwise we get unexpected results\n\n    return (\n    <Head>\n      <meta key={metaKeys['og:image']} property=\"og:image\" content={ogImageUrl} />\n      <meta key={metaKeys['og:image:secure_url']} property=\"og:image:secure_url\" content={ogImageUrl} />\n      <meta key={metaKeys['og:image:width']} property=\"og:image:width\" content={`${options.width}`} />\n      <meta key={metaKeys['og:image:height']} property=\"og:image:height\" content={`${options.height}`} />\n\n      {alt && (\n        <meta key={metaKeys['og:image:alt']} property=\"og:image:alt\" content={alt} />\n      )}\n\n      {/* Required for summary_large_image, exclude vai excludeTags */}\n      {/* https://developer.twitter.com/en/docs/twitter-for-websites/cards/overview/summary-card-with-large-image */}\n\n      {!excludeTags.includes('twitter:title') && (\n        <meta key={metaKeys['twitter:title']} property=\"twitter:title\" content={twitterTitle || ' '} />\n      )}\n\n      <meta key={metaKeys['twitter:card']} property=\"twitter:card\" content={TWITTER_CARD} />\n      <meta key={metaKeys['twitter:image']} property=\"twitter:image\" content={ogImageUrl} />\n    </Head>\n  );\n}\n\nexport default CldOgImage;\n","import React from 'react';\nimport CldUploadWidget, { CldUploadWidgetProps } from '../CldUploadWidget';\n\nexport interface CldUploadButtonProps extends Omit<CldUploadWidgetProps, 'children'> {\n  children?: JSX.Element | string | Array<JSX.Element|string>;\n  onClick?: Function;\n}\n\nconst CldUploadButton = ({\n  children,\n  onClick,\n  onError,\n  onUpload,\n  options,\n  signatureEndpoint,\n  uploadPreset,\n  ...props\n}: CldUploadButtonProps) => {\n  return (\n    <>\n      <CldUploadWidget\n        onError={onError}\n        onUpload={onUpload}\n        options={options}\n        signatureEndpoint={signatureEndpoint}\n        uploadPreset={uploadPreset}\n      >\n        {({ open }) => {\n          function handleOnClick(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n            e.preventDefault();\n\n            open();\n\n            if ( typeof onClick === 'function' ) {\n              onClick(e);\n            }\n          }\n          return (\n            <button {...props} onClick={handleOnClick} >\n              {children || 'Upload'}\n            </button>\n          );\n        }}\n      </CldUploadWidget>\n    </>\n  );\n};\n\nexport default CldUploadButton;\n","import React, { useState, useEffect, useRef } from 'react';\nimport Script from 'next/script';\n\nimport { triggerOnIdle } from '../../lib/util';\n\nimport { CldUploadWidgetProps, CldUploadWidgetResults } from './CldUploadWidget.types';\n\nconst WIDGET_WATCHED_EVENTS = [\n  'success',\n  'display-changed'\n];\n\nconst CldUploadWidget = ({\n  children,\n  onClose,\n  onError,\n  onOpen,\n  onUpload,\n  options,\n  signatureEndpoint,\n  uploadPreset,\n}: CldUploadWidgetProps) => {\n  const cloudinary: any = useRef();\n  const widget: any = useRef();\n\n  const signed = !!signatureEndpoint;\n\n  const [error, setError] = useState(undefined);\n  const [results, setResults] = useState<CldUploadWidgetResults | undefined>(undefined);\n\n  // When creating a signed upload, you need to provide both your Cloudinary API Key\n  // as well as a signature generator function that will sign any paramters\n  // either on page load or during the upload process. Read more about signed uploads at:\n  // https://cloudinary.com/documentation/upload_widget#signed_uploads\n\n  const uploadOptions = {\n    cloudName: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,\n    uploadPreset: uploadPreset || process.env.NEXT_PUBLIC_CLOUDINARY_UPLOAD_PRESET,\n    apiKey: process.env.NEXT_PUBLIC_CLOUDINARY_API_KEY,\n    ...options,\n  };\n\n  if ( signed ) {\n    uploadOptions.uploadSignature = generateSignature;\n\n    if (!uploadOptions.apiKey) {\n      console.warn(`Missing dependency: Signed Upload requires an API key`);\n    }\n  }\n\n  // Handle result states and callbacks\n\n  useEffect(() => {\n    if ( typeof results === 'undefined' ) return;\n\n    const isSuccess = results.event === 'success';\n    const isClosed = results.event === 'display-changed' && results.info === 'hidden';\n\n    if ( isSuccess && typeof onUpload === 'function' ) {\n      onUpload(results, widget.current);\n    }\n\n    if ( isClosed && typeof onClose === 'function' ) {\n      onClose(widget.current);\n    }\n  }, [results])\n\n  useEffect(() => {\n    if ( error && typeof onError === 'function' ) {\n      onError(error, widget.current);\n    }\n  }, [error]);\n\n  /**\n   * handleOnLoad\n   * @description Stores the Cloudinary window instance to a ref when the widget script loads\n   */\n\n  function handleOnLoad() {\n    if ( !cloudinary.current ) {\n      cloudinary.current = (window as any).cloudinary;\n    }\n\n    // To help improve load time of the widget on first instance, use requestIdleCallback\n    // to trigger widget creation. Optional.\n\n    triggerOnIdle(() => {\n      if ( !widget.current ) {\n        widget.current = createWidget();\n      }\n    });\n  }\n\n  /**\n   * generateSignature\n   * @description Makes a request to an endpoint to sign Cloudinary parameters as part of widget creation\n   */\n\n  function generateSignature(callback: Function, paramsToSign: object) {\n    if ( typeof signatureEndpoint === 'undefined' ) {\n      throw Error('Failed to generate signature: signatureEndpoint undefined.')\n    }\n    fetch(signatureEndpoint, {\n      method: 'POST',\n      body: JSON.stringify({\n        paramsToSign,\n      }),\n    })\n      .then((r) => r.json())\n      .then(({ signature }) => {\n        callback(signature);\n      });\n  }\n\n  /**\n   * createWidget\n   * @description Creates a new instance of the Cloudinary widget and stores in a ref\n   */\n\n  function createWidget() {\n    return cloudinary.current?.createUploadWidget(uploadOptions, (uploadError: any, uploadResult: any) => {\n      // The callback is a bit more chatty than failed or success so\n      // only trigger when one of those are the case. You can additionally\n      // create a separate handler such as onEvent and trigger it on\n      // ever occurrence\n\n      if ( typeof uploadError !== 'undefined' ) {\n        setError(uploadError);\n      }\n\n      if ( WIDGET_WATCHED_EVENTS.includes(uploadResult?.event) ) {\n        setResults(uploadResult);\n      }\n    });\n  }\n\n  /**\n   * open\n   * @description When triggered, uses the current widget instance to open the upload modal\n   */\n\n  function open() {\n    if (!widget.current) {\n      widget.current = createWidget();\n    }\n\n    widget?.current.open();\n\n    if ( typeof onOpen === 'function' ) {\n      onOpen(widget.current);\n    }\n  }\n\n  return (\n    <>\n      {typeof children === 'function' && children({\n        cloudinary: cloudinary.current,\n        widget: widget.current,\n        open,\n        results,\n        error\n      })}\n      <Script\n        id={`cloudinary-uploadwidget-${Math.floor(Math.random() * 100)}`}\n        src=\"https://widget.cloudinary.com/v2.0/global/all.js\"\n        onLoad={handleOnLoad}\n        onError={(e) => console.error(`Failed to load Cloudinary Upload Widget: ${e.message}`)}\n      />\n    </>\n  );\n};\n\nexport default CldUploadWidget;\n","/**\n * triggerOnIdle\n * @see MDN Polyfill https://github.com/behnammodi/polyfill/blob/master/window.polyfill.js#L7-L24\n */\n\nexport function triggerOnIdle(callback: any) {\n  if ( window && 'requestIdleCallback' in window ) {\n    return requestIdleCallback(callback);\n  }\n  return setTimeout(() => callback(), 1);\n}","import React, { useRef, MutableRefObject } from 'react';\nimport Script from 'next/script';\nimport Head from 'next/head';\n\nimport { CldVideoPlayerProps } from './CldVideoPlayer.types';\nimport { CloudinaryVideoPlayer, CloudinaryVideoPlayerOptions, CloudinaryVideoPlayerOptionsLogo } from '../../types/player';\n\nconst CldVideoPlayer = (props: CldVideoPlayerProps) => {\n  // If no ID is passed in - we want to be able to ensure that we are using\n  // unique IDs for each player. We can do this by generating a random number\n  // and using that as the ID. We use a ref here so that we can ensure that\n  // the ID is only generated once.\n  const idRef = useRef(Math.ceil(Math.random() * 100000));\n\n  const {\n    autoPlay = 'never',\n    colors,\n    controls = true,\n    fontFace,\n    height,\n    id,\n    logo = true,\n    loop = false,\n    muted = false,\n    onDataLoad,\n    onError,\n    onMetadataLoad,\n    onPause,\n    onPlay,\n    onEnded,\n    src,\n    version = '1.9.4',\n    width,\n  } = props as CldVideoPlayerProps;\n\n  // Setup the refs and allow for the caller to pass through their\n  // own ref instance\n\n  const cloudinaryRef = useRef<any>();\n  const defaultVideoRef = useRef() as MutableRefObject<HTMLVideoElement | null>;\n  const videoRef = props.videoRef || defaultVideoRef;\n  const defaultPlayerRef = useRef()as MutableRefObject<CloudinaryVideoPlayer | null>;\n  const playerRef = props.playerRef || defaultPlayerRef;\n\n  const playerId = id || `player-${src.replace('/', '-')}-${idRef.current}`;\n\n  const events: Record<string, Function|undefined> = {\n    error: onError,\n    loadeddata: onDataLoad,\n    loadedmetadata: onMetadataLoad,\n    pause: onPause,\n    play: onPlay,\n    ended: onEnded\n  };\n\n  /**\n   * handleEvent\n   * @description Event handler for all player events\n   */\n\n  function handleEvent(event: { type: 'string' }) {\n    const activeEvent = events[event.type];\n\n    if ( typeof activeEvent === 'function' ) {\n      activeEvent(getPlayerRefs());\n    }\n  }\n\n  /**\n   * handleOnLoad\n   * @description Stores the Cloudinary window instance to a ref when the widget script loads\n   */\n\n  function handleOnLoad() {\n    if ( 'cloudinary' in window ) {\n      cloudinaryRef.current = window.cloudinary;\n\n      let logoOptions: CloudinaryVideoPlayerOptionsLogo = {};\n\n      if ( typeof logo === 'boolean' ) {\n        logoOptions.showLogo = logo;\n      } else if ( typeof logo === 'object' ) {\n        logoOptions = {\n          ...logoOptions,\n          showLogo: true,\n          logoImageUrl: logo.imageUrl,\n          logoOnclickUrl: logo.onClickUrl\n        }\n      }\n\n      let playerOptions: CloudinaryVideoPlayerOptions = {\n        autoplayMode: autoPlay,\n        cloud_name: process.env.NEXT_PUBLIC_CLOUDINARY_CLOUD_NAME,\n        controls,\n        fontFace: fontFace || '',\n        loop,\n        muted,\n        publicId: src,\n        secure: true,\n        ...logoOptions\n      };\n\n      if ( typeof colors === 'object' ) {\n        playerOptions.colors = colors;\n      }\n\n      playerRef.current = cloudinaryRef.current.videoPlayer(videoRef.current, playerOptions);\n\n      Object.keys(events).forEach((key) => {\n        if ( typeof events[key] === 'function' ) {\n          playerRef.current?.on(key, handleEvent);\n        }\n      });\n    }\n  }\n\n  /**\n   *getPlayerRefs\n   */\n\n  function getPlayerRefs() {\n    return {\n      player: playerRef.current,\n      video: videoRef.current\n    }\n  }\n\n  return (\n    <>\n      <Head>\n        <link href={`https://unpkg.com/cloudinary-video-player@${version}/dist/cld-video-player.min.css`} rel=\"stylesheet\" />\n      </Head>\n      <div style={{ width: '100%', aspectRatio: `${props.width} / ${props.height}`}}>\n        <video\n          ref={videoRef}\n          id={playerId}\n          className=\"cld-video-player cld-fluid\"\n          width={width}\n          height={height}\n        />\n        <Script\n          id={`cloudinary-videoplayer-${Math.floor(Math.random() * 100)}`}\n          src={`https://unpkg.com/cloudinary-video-player@${version}/dist/cld-video-player.min.js`}\n          onLoad={handleOnLoad}\n          onError={(e) => console.error(`Failed to load Cloudinary Video Player: ${e.message}`)}\n        />\n      </div>\n    </>\n  );\n};\n\nexport default CldVideoPlayer;"],"mappings":"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","names":["src_exports","__export","CldImage_default","CldOgImage_default","CldUploadButton_default","CldUploadWidget_default","CldVideoPlayer_default","cloudinaryLoader","getCldImageUrl","__toCommonJS","import_react","import_image","import_util","import_url_loader","import_url_loader","import_package","package_default","NEXT_CLOUDINARY_ANALYTICS_ID","NEXT_CLOUDINARY_VERSION","package_default","NEXT_VERSION","nextPkg","getCldImageUrl","options","config","analytics","NEXT_CLOUDINARY_ANALYTICS_ID","NEXT_CLOUDINARY_VERSION","NEXT_VERSION","pollForProcessingImage","src","resolve","reject","res","e","cloudinaryLoader","loaderOptions","imageProps","cldOptions","cldConfig","options","multiplier","getCldImageUrl","CldImage","props","CLD_OPTIONS","prop","imageProps","key","defaultImgKey","imgKey","setImgKey","cldOptions","transformations","e","handleOnError","options","pollForProcessingImage","React","Image","loaderOptions","cloudinaryLoader","CldImage_default","import_react","import_head","IMAGE_WIDTH","IMAGE_HEIGHT","TWITTER_CARD","CldOgImage","excludeTags","twitterTitle","keys","props","alt","options","metaKeys","ogImageUrl","getCldImageUrl","React","Head","CldOgImage_default","import_react","import_react","import_script","triggerOnIdle","callback","WIDGET_WATCHED_EVENTS","CldUploadWidget","children","onClose","onError","onOpen","onUpload","options","signatureEndpoint","uploadPreset","cloudinary","widget","signed","error","setError","results","setResults","uploadOptions","generateSignature","isSuccess","isClosed","handleOnLoad","triggerOnIdle","createWidget","callback","paramsToSign","r","signature","_a","uploadError","uploadResult","open","React","Script","e","CldUploadWidget_default","CldUploadButton","children","onClick","onError","onUpload","options","signatureEndpoint","uploadPreset","props","React","CldUploadWidget_default","open","handleOnClick","e","CldUploadButton_default","import_react","import_script","import_head","CldVideoPlayer","props","idRef","autoPlay","colors","controls","fontFace","height","id","logo","loop","muted","onDataLoad","onError","onMetadataLoad","onPause","onPlay","onEnded","src","version","width","cloudinaryRef","defaultVideoRef","videoRef","defaultPlayerRef","playerRef","playerId","events","handleEvent","event","activeEvent","getPlayerRefs","handleOnLoad","logoOptions","playerOptions","key","_a","React","Head","Script","e","CldVideoPlayer_default"]}